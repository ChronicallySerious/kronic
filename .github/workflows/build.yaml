name: build-check

on: [push]

jobs:
  ubuntu:
    runs-on: "ubuntu-latest"

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Create build cache 
      uses: actions/cache@v1
      with:
        path: build/
        key: ${{ runner.OS }}-kronic-build-cache-${{ github.ref }}
        restore-keys: |
          ${{ runner.OS }}-kronic-build-cache-

    - name: Install Vulkan SDK
      uses: humbletim/install-vulkan-sdk@v1.1.1
      with:
        version: 1.3.204.0
        cache: true

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt install -y xorg-dev

    - name: Configure CMake cache
      run: |
        mkdir -p build
        cd build
        rm -f CMakeCache.txt
        cmake .. -DBUILD_TESTS=ON

    - name: Build
      run: |
        cd build
        cmake --build . --target kronic kronic_tests --config Debug -j2

    - name: Test
      run: ./build/bin/kronic_tests

    - name: Upload Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: kronic-ubuntu-${{ github.sha }}
        if-no-files-found: error
        path: |
          ./build/bin/kronic

  windows:
    runs-on: "windows-latest"
    env:
      VULKAN_SDK: C:\VulkanSDK\

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Create build cache 
      uses: actions/cache@v1
      with:
        path: build/
        key: ${{ runner.OS }}-kronic-build-cache-${{ github.ref }}
        restore-keys: |
          ${{ runner.OS }}-kronic-build-cache-

    - name: Install Vulkan SDK
      run: |
          $ver = (Invoke-WebRequest -Uri "https://vulkan.lunarg.com/sdk/latest.json" | ConvertFrom-Json).windows
          echo Version $ver
          $ProgressPreference = 'SilentlyContinue'
          Invoke-WebRequest -Uri "https://sdk.lunarg.com/sdk/download/$ver/windows/VulkanSDK-$ver-Installer.exe" -OutFile VulkanSDK.exe
          echo Downloaded
          .\VulkanSDK.exe --root C:\VulkanSDK --accept-licenses --default-answer --confirm-command install

    - name: Configure CMake cache
      run: |
        test -d build || mkdir build
        cd build
        rm CMakeCache.txt -ErrorAction Ignore
        cmake .. -DBUILD_TESTS=ON

    # TODO: Fix this.
    # We do a release build because the LunarG Vulkan SDK ships 
    # with a shaderc_combined.lib that links to release mode 
    # multithreaded runtime binaries. Doing a debug build with 
    # it would lead to linking errors.
    - name: Build
      run: |
        cd build
        cmake --build . --target kronic kronic_tests --config Release -j2

    - name: Test
      run: ./build/bin/Release/kronic_tests.exe

    - name: Upload Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: kronic-windows-${{ github.sha }}
        if-no-files-found: error
        path: |
          ./build/bin/Release/kronic.exe
